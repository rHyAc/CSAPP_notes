Big/Litter-endian issues may occur when
	1. a little-endian machine send data to a big-endian machine
		solution: network standard
	2. looking at the byte sequence representing integer data
		eg: disassembly for x86-64
			4004d3: 01 05 43 0b 20 00	add  %eax, 0x200b43(%rip)
		—— lowest-numbered byte on the left and the highest on the right
	3. programs are written that circumvent the normal type system
		eg: C code
			int a = 12345;	//0x00003039
			printf("%.2x", *(char *)&a);
		—— get 0x39 in little endian machines while 0x00 in big endian ones 
		—— pointer points to the lowest byte address occupied by the object
	by the way
		"12345" is stored in memory in the form 0x31 0x32 0x33 0x34 0x35 0x00,
		from low to high in both a little-endian machine and a big-endian machine.

Conversion rules trick of C
	<limits.h>
    		#define INT_MAX 2147483647
    		#define INT_MIN (-INT_MAX - 1)  // neither -2147483648 nor 0x80000000
		
 two's-complement arithmetic operations overflows test
 	1. can't use subtraction to test whether addition has overflowed
		/* int x, int y */
		int sum = x + y;
		/* wrong */
		// return (sum - x == y) && (sum - y == x);
		/* right */
		return !(x < 0 && y < 0 && sum >= 0) &&
		       !(x >= 0 && y >= 0 && sum < 0);
 	2. can use division to test whether multiplication has overflowed
		/* int x, int y */
		int p = x * y;
		return !x || p / x == y;
		
IEEE float point representation
	1. normalized values: exp bit field is neither all zeros nor ones
	2. denormalized values: exp bit field is all zeros. In this case the exp value is 
	   E = 1 - bias(127 for 32bit, 2^(8 - 1) - 1), while the significant value without an implied leading 1. 
	   This case serve for representation of +/-0.0 and values evenly near 0.0
	3. special values: exp bit field is all ones. When fraction field is all zeros, it represent +/-infinity; 
	   When it isn't, the value is called a "NaN" used to represent sqrt(-1) sometimes

The IEEE floating-point format defines four different rounding modes
	1. round to even, as default, aka round to nearest, and the values are halfway between two possible results
	   are rounded to the least significant digit of the result is even
	2. round toward zero
	3. round down
	4. round up
