
Basic
	1. clients and servers are processes and not machines or hosts
	
	2. to a host, a network is just another I/O device that serves as a source and 
           sink for data
	   
	3. TCP provides reliable full duplex connections

IP
	TCP/IP defines a uniform network byte order (big-endian byte order) for any integer
	data item, such as an IP address, that is carried across the network in a packet 
	header
	
	/* IP address structure */
	struct in_addr
	{
		uint32_t s_addr; /* address in network byte order (bigendian) */
	};
	
	#include <arpa/inet.h>
	/* converts an unsigned integer from host byte order to network byte order
		returns: value in network byte order 
	*/
	uint32_t htonl(uint32_t hostlong);
	uint16_t htons(uint16_t hostshort);

	/* converts an unsigned integer from network byte order to host byte order
		returns: value in host byte order 
	*/
	uint32_t ntohl(uint32_t netlong);
	uint16_t ntohs(unit16_t netshort);
	
	/*  converts a dotted-decimal string (src) to a binary IP address in network byte
	    order (dst) 
		returns: 1 if OK, 0 if src is invalid dotted decimal, −1 on error
	*/
	int inet_pton(AF_INET, const char * src, void * dst);
	
	/*  converts a binary IP address in network byte order (src) to the corresponding
	    dotted-decimal representation and copies at most size bytes of the resulting 
	    null-terminated string to dst
		returns: pointer to a dotteddecimal string if OK, NULL on error
	*/
	const char * inet_ntop(AF_INET, const void * src, char * dst, socklen_t size);

Domain names
	(...).third-level.second-level.first-level
	      www	 .github      .com
	      
	1. nslookup + domain name command, displays the IP addresses associated 
					with a domain name
	2. hostname command, show the real domain name of local host
	
	NTOICE: some valid domain names are not mapped to any IP address
	
	3. the ephemeral port assigned by the kernel

Socket
	from the perspective of the Linux kernel, a socket is an end point for 
	communication. From the perspective of a Linux program, a socket is an open 
	file with a corresponding descriptor
	
	/* IP socket address structure */
	struct sockaddr_in
	{
		uint16_t sin_family; /* protocol family (always AF_INET) */
		uint16_t sin_port; /* port number in network byte order */
		struct in_addr sin_addr; /* IP address in network byte order */
		unsigned char sin_zero[8]; /* pad to sizeof(struct sockaddr) */
	};
	
	/* generic socket address structure (for connect, bind, and accept) 
	   (usually casted from sockaddr_in)
	*/ 
	struct sockaddr 
	{
		uint16_t sa_family; /* protocol family */
		char sa_data[14]; /* address data */
	};
	
	
	#include <sys/socket.h>
	/* returns: nonnegative descriptor if OK, −1 on error */
	int socket(int domain, int type, int protocol);
	
	/* blocks until either the connection is successfully established or
	   an error occurs
	   	args
			addrlen, sizeof(sockaddr_in)
		returns: 0 if OK, −1 on error 
	*/
	int connect(int clientfd, const struct sockaddr * addr, socklen_t addrlen);
