Processing stages
	fetch: at the beginning, PC(not a hardware register, only a specifier) is set to 
	       the address of the instruction is going to be fetch, according to the state 
	       information of the previous cycle
 	decode: read up to tow operands from register file
	execute: including generate cond
	memory: write/read data to/from memory
	write back: write up to two results to register file


Timing and pipeline
	1. combinational logic does not require any sequencing or control — values propagate through 
	   a network of logic gates whenever the inputs change
	2. reading from a random access memory(including register file and virtual memory system)
	   operates much like combinational logic is assumed like combinational logic
	3. the program counter(a hardware register), the condition code register, the data memory, and the register file. 
	   These are controlled via a single clock signal that triggers the loading of new values into the
	   clocked registers and the writing of values to the random access memories. All of the state updates 
	   actually occur simultaneously and only as the clock rises to start the next cycle
	4. having clocked registers between blocks of combinational logic suffices to control the
	   flow of instructions in the pipeline. 
	5. signals generated in a pipeline stage that will be used in following stages need to be 
	   carried along in the pipeline by being stored in registers of each stage until reaching their destination
	(6. keep all of the information about a particular instruction contained within a single pipeline stage)
	   
	NOTEIC: jump instructions require the value of valP in the execute stage in the event the jump is not taken
	   
Pipeline hazards
	dependencies between successive instructions can mainly take two forms:
		1. data dependencies, where the results computed by one instruction are used as the data 
		   for a following instruction
		2. control dependencies, where one instruction determines the location of the following instruction
		
	hazards: a potential erroneous computation by the pipeline results from dependencies
		1. data hazards 
			resolution
				1. stalling, injecting a bubble(nop) into the a stage each time and holding 
				   an instruction back in a previous stage by keeping pipeline register
				   of it in a fixed state(but there is no way to inject a bubble into the 
				   fetch stage)
				2. fawarding, passing a result value(e_valE, m_valM, M_valE, W_valM, and W_valE 
				   —— priority decreases from left to right) directly from one pipeline stage 
				   to an earlier one(usually the decode stage)
		2. control hazards
			the resolution to misperdiction
				instruction squashing, once branch logic detects that the jump should not be 
				taken during execute stage, cancel the misfetched instructions by injecting 
				bubbles into their following stages while also fetching the instruction following 
				the jump instruction
				   
Exception handling
	1. when an exception occurs in one ormore stages of a pipeline, the information is simply stored in the status
	   fields of the pipeline registers. The event has no effect on the flow ofinstructions in the pipeline until 
	   an excepting instruction reaches the final pipeline stage, except to disable any updating of the programmer
	   visible state (the condition code register and the memory) by later instructions in the pipeline
	2. As the excepting instruction reaches the memory stage, take steps to prevent later instructions from 
	   modifying the programmer-visible state by 
		1. disabling the setting of condition codes by instructions in the execute stage
		2. injecting bubbles into the memory stage to disable any writing to the data memory
		3. stalling the write-back stage when it has an excepting instruction
