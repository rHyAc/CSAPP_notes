
Exception handle
	push some additional processor state onto the kernel's stack and then run the exceptional handlers
	in kernel mode

Classes of exceptions

	----------------------------------------------------------------------------------------
	| class	    | cause			    | return behavior			       |
	________________________________________________________________________________________
	| interrupt | signal from I/O		    | return to next instruction	       |
	|-------------------------------------------|------------------------------------------|
	| trap	    | intention exception	    | return to next instruction	       |
	|-------------------------------------------|------------------------------------------|
	| fault	    | potentially recoverable error | reuturn to current instruction if        |
	|	    |				    | succeeding in correcting error condition.|
	|	    |				    | Otherwise, abort			       |
	|--------------------------------------------------------------------------------------|
	| abort	    | nonrecoverable error	    | terminate the process causing the errors |
	----------------------------------------------------------------------------------------

Exceptions in Linux/x86_64 

	-------------------------------------------------------------------------------------
	| exception number | description			    	| exception class   |		       
	_____________________________________________________________________________________
	| 0 		   | divide error		    		| fault	            |
	|		   | (divide by zero or when the result 	|		    |
	|		   |  of a divide instruction is too big 	|		    |
	|		   |  for the destination operand)		|		    |
	|-----------------------------------------------------------------------------------|
	| 13		   | general protection fault	    		| fault	            |
	|		   | (references virtual memory illegally) 	|		    |
	|-----------------------------------------------------------------------------------|
	| 14		   | page fault 	   	 		| fault		    |
	|-----------------------------------------------------------------------------------|
	| 18		   | machine check	    			| abort		    |
	|		   | (fatal hardware error during the 		|		    |
	|		   | execution of the faulting instruction) 	|		    |
	|-----------------------------------------------------------------------------------|
	| 32 - 255 	   | OS-defined exceptions 			| interrupt or trap |
	-------------------------------------------------------------------------------------
	
Linux/x86_64 system call

	-----------------------------------------------------------------------------------
	| number | name	 | description   	| number | name   | description 	  |	       
	___________________________________________________________________________________
	| 0 	 | read	 |  read file		| 33 	 | pause  | suspend process until |
	|	 |	 |			|	 |	  | signal arrives	  |
	|---------------------------------------------------------------------------------|
	| 1	 | write | write file       	| 37 	 | alarm  | schedule delivery of  |
	|	 |	 |			|	 |	  | alarm signal	  |
	|---------------------------------------------------------------------------------|
	| 2	 | open	 | open file	    	| 39 	 | getpid | get process ID	  |
	|---------------------------------------------------------------------------------|
	| 3	 | close | close file	  	| 57 	 | fork   | create process	  |
	|---------------------------------------------------------------------------------|
	| 4 	 | stat	 | get info about file  | 59 	 | execve | execute a program	  |
	----------------------------------------------------------------------------------|
	| 9 	 | mmap	 | map memory page to  	| 60 	 | _exit  | terminate process	  |
	|	 |	 | file			|	 |	  |			  |
	----------------------------------------------------------------------------------|
	| 12 	 | brk 	 | reset the top of 	| 61	 | wait4  | wait for a process	  |
	|	 |	 | the heap 		|	 |	  | to terminate	  |
	----------------------------------------------------------------------------------|
	| 32 	 | dup2  | copy file descriptor | 62 	 | kill   | send signal to a	  |
	|	 |	 |			|	 |	  | process		  |
	-----------------------------------------------------------------------------------
	
	1. for the syscall insturction, %rax contains the syscall number with up to six arguments 
	   in %rdi, %rsi,%rdx, %r10, %r8, and %r9. 
	2. on return from the system call, registers %rcx and %r11 are destroyed, and %rax contains 
	   the return value
	3. a negative return value between -4,095 and -1 indicates an error corresponding to negative errno
	
Kernel mode
	1. processors typically provide this capability with a mode bit in some control register that 
	   characterizes the privileges that the process currently enjoys
	2. a process running in kernel mode can execute any instruction in the instruction set and
	   access any memory location in the system
	   
	3. the /proc filesystem exports the contents of many kernel data structures as a hierarchy of 
	   text files that can be read by user programs
	4.  a /sys filesystem, which exports additional low-level information about system buses and devices

Context switches
	process A â†’ process B
		1. before the switch, the kernel is executing instructions in user mode on behalf of process A 
		   (i.e., there is no separate kernel process). 
		2. during the first part of the switch, the kernel is executing instructions in kernel mode on 
		   behalf of process A. 
		3. then at some point it begins executing instructions (still in kernel mode) on behalf ofprocess B
		4. and after the switch, the kernel is executing instructions in user mode on behalf of process B

Creating and terminating processes
	1. #include <stdlib.h>
	
	   /* terminates the process with an exit status of status */
	   void exit(int status); 
	   
	   
	2. #include <unistd.h>
	
	   /* returns: 0 to child, PID of child to parent, -1 on error */
	   pid_t fork(void);
	   
	   NOTICE: the child also gets identical copies of any of the parent's open file descriptors, 
	           which means the child can read and write any files that were open in theparent 
		   when it called fork 

Reaping child processes
	When a parent process terminates, the kernel arranges for the process never terminating whose PID is 1 to 
	become the adopted parent of any orphaned children so as to reap them after they terminate


	#include <sys/wait.h>
	
	/* suspends execution of the calling thread until a child specified by pid argument has changed state.  
	   Can be used to reap a child. By default(option = 0), waitpid() waits only for terminated children
	   	args
			pid
				 -1, meaning wait for any child process
				 > 0, meaning wait for the child whose process ID is equal to the value of pid
			wstatus
				if wstatus is not NULL, store status information in the int to which it points.
				The int can be inspected with the macros defined in the head file
			option
				1. 0 (default)
				2. WNOHANG, return immediately if no child has exited
				3. WUNTRACED, also return if a child has stopped
				4. WCONTINUED, also return if a stopped child has been resumed by delivery of SIGCONT
				5. OR some of them
		return 
			1. on success, returns the process ID of the child whose state has changed
			2. if WNOHANG was specified and one or more child(ren) specified by pid exist, but have not yet
			   changed state, then 0 is returned
			3. on error, return -1. 
		errors
			if the calling process has no children, then sets errno to ECHILD
			if the waitpid function was interrupted by a signal, then sets errno to EINTR
	*/
	pid_t waitpid(pid_t pid, int * wstatus, int options);
	
	/* equivalent to waitpid(-1, wstatus, 0); */
	pid_t wait(int * wstatus);

Putting processes to sleep
	#include <unistd.h>
	
	/* returns: seconds left to sleep */
	unsigned int sleep(unsigned int secs);
	
	/* puts the calling function to sleep until a signal is received by the process
		returns -1 
	*/
	int pause(void);

Loading and running programs
	#include <unistd.h>
	
	/* executes the program referred to by filename. This causes the program that is currently being run 
	   by the calling process to be replaced with a new program, with newly initialized stack, heap, and
          (initialized and uninitialized) data segments
		agrs
			filename, executable object file
			arv, argument list. By convention, argv[0] is the name of the executable object file
			envp, environment variable list, each of which is a name-value pair of the form "name=value"
	  	return 
			does not return if OK; 
			-1 on error 
	   	NOTICE
	   		the global variable (char **)environ points to the first of system env pointers, envp [0]
	*/
	int execve(const char * filename, const char * argv[], const char * envp[]);
	
	
	#include <stdlib.h>
	
	/* searches the environment array for a string "name=value". 
		returns: 
			pointer to name if it exists
			NULL if no match
	*/
	char * getenv(const char * name);
	
	/* 1. if the environment array contains a string of the form name=oldvalue, then unsetenv deletes 
	      it and setenv replaces oldvalue with newvalue, but only if overwrite is nonzero
	   2. if name does not exist, then setenv adds name=newvalue to the array
	   	returns
			0 on success
			-1 on error
	*/
	int setenv(const char * name, const char * newvalue, int overwrite);
	
	void unsetenv(const char * name);

Signals

	------------------------------------------------------------------------
	| number | name      | default action  | corresponding event           |
	________________________________________________________________________
	| 1	 | SIGHUP    | terminate       | terminal line hangup          |
	|----------------------------------------------------------------------|
	| 2      | SIGINT    | terminate       | interrupt from keyboard       |
	|----------------------------------------------------------------------|
	| 3      | SIGQUIT   | terminate       | quit from keyboard	       |
	|----------------------------------------------------------------------|
	| 4      | SIGILL    | terminate       | illegal instruction	       |
	|----------------------------------------------------------------------|
	| 5      | SIGTRAP   | terminate and   | trace trap		       |
	|	 |	     | dump core       |			       |
	|----------------------------------------------------------------------|
	| 6      | SIGABRT   | terminate and   | abort signal from abort       |
	|	 |	     | dump core       | function		       |
	|----------------------------------------------------------------------|
	| 7      | SIGBUS    | terminate       | bus error		       |
	|----------------------------------------------------------------------|
	| 8      | SIGFPE    | terminate and   | floating-point exception      |
	|	 |	     | dump core       |			       |
	|----------------------------------------------------------------------|
	| 9      | SIGKILL   | terminate       | kill program		       |
	|----------------------------------------------------------------------|
	| 10     | SIGUSR1   | terminate       | user-defined signal 1	       |
	|----------------------------------------------------------------------|
	| 11     | SIGSEGV   | terminate and   | invalid memory reference      |
	|	 |	     | dump core       | ï¼ˆseg fault)		      |
	|----------------------------------------------------------------------|
	| 12     | SIGUSR2   | terminate       | user-defined signal 2	       |
	|----------------------------------------------------------------------|
	| 13     | SIGPIPE   | terminate       | wrote to a pipe with no       |
	|	 |	     |		       | reader 		       |
	|----------------------------------------------------------------------|
	| 14     | SIGALRM   | terminate       | timer signal from alarm       |
	|	 |	     |		       | function		       |
	|----------------------------------------------------------------------|
	| 15     | SIGTERM   | terminate       | software termination signal   |
	|----------------------------------------------------------------------|
	| 16     | SIGSTKFLT | terminate       | stack fault on coprocessor    |
	|----------------------------------------------------------------------|
	| 17     | SIGCHLD   | ignore          | a child process has stopped   |
	|	 |	     |		       | or terminated                 |
	|----------------------------------------------------------------------|
	| 18     | SIGCONT   | ignore          | continue process if stopped   |
	|----------------------------------------------------------------------|
	| 19     | SIGSTOP   | stop until next | stop signal not from terminal |
	|	 |	     | SIGCONT	       |       			       |
	|----------------------------------------------------------------------|
	| 20     | SIGTSTP   | stop until next | stop signal from terminal     |
	|	 |	     | SIGCONT	       |			       |
	|----------------------------------------------------------------------|
	| 21     | SIGTTIN   | stop until next | background process read       |
	|	 |	     | SIGCONT	       | from terminal		       |
	|----------------------------------------------------------------------|
	| 22     | SIGTTOU   | stop until next | background process wrote to   |
	|	 |	     | SIGCONT	       | terminal		       |
	|----------------------------------------------------------------------|
	| 23     | SIGURG    | ignore          | urgent condition on socket    |
	|----------------------------------------------------------------------|
	| 24     | SIGXCPU   | terminate       | CPU time limit exceeded       |
	|----------------------------------------------------------------------|
	| 25     | SIGXFSZ   | terminate       | file size limit exceeded      |
	|----------------------------------------------------------------------|
	| 26     | SIGVTALRM | terminate       | virtual timer expired	       |
	|----------------------------------------------------------------------|
	| 27     | SIGPROF   | terminate       | profiling timer expired       |
	|----------------------------------------------------------------------|
	| 28     | SIGWINCH  | ignore          | window size changed	       |
	|----------------------------------------------------------------------|
	| 29     | SIGIO     | terminate       | I/O now possible on a	       |		
	|	 |	     |		       | descriptor		       |
	|----------------------------------------------------------------------|
	| 30     | SIGPWR    | terminate       | power failure 		       |
	------------------------------------------------------------------------
	
	
	1. spending signal (a signal that has been sent but not yet received)
		1. at any point in time, there can be at most one pending signal of a particular type
		2. if a process has a pending signal of type k, then any subsequent signals of type k 
		   will be simply discarded
		3. when a signal is blocked, it can be delivered, but the resulting pending signal will 
		   not be received until the process unblocks the signal
		4. for each process, the kernel maintains the set of pending signals in the pending bit vector,
		   and the set of blocked signals in the blocked bit vector. The kernel sets bit k in pending 
		   whenever a signal of type k is delivered and clears bit k in pending whenever a signal of 
		   type k is received	
	
	2. sending a signal
		1. the kernel sends a signal to a destination process by updating some state 
		   in the context of the destination process
		2. the signal is delivered for one of two reasons:
			1. the kernel has detected a system event such as a divide-by-zero error
			2. A process has invoked the kill function to explicitly request the kernel to 
			   send a signal to the destination process
			   		    
		> kill -9 12345
		sends signal 9 (SIGKILL) to process 12345
		> kill -9 -12345
		sends a SIGKILL signal to every process in process group 12345
	
		ctrl + c, send a SIGINT signal to every process in the foreground process group
		crtl + z, send a SIGTSTP signal to every process in the foreground process group


		#include <signal.h>
		
		/* args: 
			pid 
				= 0, every process in the process group of the calling process
				< 0, every process in process group |pid|
		   returns: 0 if OK, -1 on error 
		*/
		int kill(pid_t pid, int sig);


		#include <unistd.h>
		
		/* cancels any pending alarms, send SIGALRM signals to itself 
			arg: if secs = 0, no new alarm is scheduled
			returns: remaining seconds of previous alarm, or 0 if no previous alarm
		*/
		unsigned int alarm(unsigned int secs);
		
	3. receiving a signal
		1. when the kernel switches a process p from kernel mode to user mode, it checks the set of 
		   unblocked pending signals (pending & ~blocked) for p
		2. if the set is nonempty, then the kernel chooses some signal k in the set (typically the smallest k) 
		   and forces p to receive signal k. The receipt of the signal triggers some action by the process
		
		
		
		#include <signal.h>
		
		/* the int used to indicates the signal type k */
		typedef void (* sighandler_t)(int);
		
		/* modify the default action associated with a signal
			args
				handler
					1. SIG_IGN, signals of type signum are ignored
					2. SIG_DFL, the action for signals of type signum reverts to the default action
					3. the address of a user-defined function, be called whenever the process receives 
					   a signal of type signum (installing the handler; The invocation of the handler 
					   is called catching the signal; The execution of the handler is referred to as
					   handling the signal)
			returns
				1. pointer to previous handler if OK
				2. SIG_ERR on error (does not set errno)
			NOTICE: 
				1. the handler installed for signal k is invoked with a single integer argument set to k
				2. signal handlers can be interrupted by other handlers
		*/
		sighandler_t signal(int signum, sighandler_t handler);
		
		/* allows users to clearly specify the signal-handling semantics they want
			returns: 0 if OK, -1 on error
		*/
		int sigaction(int signum, struct sigaction * act, struct sigaction * oldact);
		
	4. conservative handler function suggestion (signal handlers run concurrently with the main program 
		                                     and with other types' one)
		1. call only async-signal-safe functions which is either reentrant or 
		   cannot be interrupted by a signal handler in your handlers. 
			   
			Linux async-signal-safe functions
			----------------------------------------------------------------------------
			| Exit	 	| fexecve	| poll	 		| sigqueue	   |
			|--------------------------------------------------------------------------|
			| _exit 	| fork 		| posix_trace_event	| sigset	   |
			|--------------------------------------------------------------------------|
			| abort 	| fstat 	| pselect 		|sigsuspend	   |
			|--------------------------------------------------------------------------|
			| accept 	| fstatat	| raise			| sleep		   |
			|--------------------------------------------------------------------------|
			| access	| fsync		| read			| sockatmark	   |
			|--------------------------------------------------------------------------|
			| aio_error	| ftruncate	| readlink		| socket	   |
			|--------------------------------------------------------------------------|
			| aio_return	| futimens	| readlinkat		| socketpair	   |
			|--------------------------------------------------------------------------|
			| aio_suspend	| getegid	| recv			| stat		   |
			|--------------------------------------------------------------------------|
			| alarm 	| geteuid 	| reevfrom 		| symlink	   |
			|--------------------------------------------------------------------------|
			| bind		| getgid	| reevmsg		| symlinkat	   |
			|--------------------------------------------------------------------------|
			| cfgetispeed	| getgroups	| rename		| tcdrain	   |
			|--------------------------------------------------------------------------|
			| cfgetospeed 	| getpeername	| renameat		| tcflow	   |
			|--------------------------------------------------------------------------|
			| cfsetispeed	| getpgrp	| rmdir			| tcflush	   |
			|--------------------------------------------------------------------------|
			| cfsetospeed	| getpid	| select		| tcgetattr	   |
			|--------------------------------------------------------------------------|
			| chdir		| getppid	| sem_post		| tcgetpgrp	   |
			|--------------------------------------------------------------------------|
			| chmod 	| getsockname 	| send			| tcsendbreak	   |
			|--------------------------------------------------------------------------|
			| chown		| getsockopt	| sendmsg		| tcsetattr	   |
			|--------------------------------------------------------------------------|
			| clock_gettime	| getuid	| sendto		| tcsetpgrp	   |
			|--------------------------------------------------------------------------|
			| close		| kill		| setgid		| timeFigure 	   |
			|--------------------------------------------------------------------------|
			| close		| kill		| setgid		| time		   |
			|--------------------------------------------------------------------------|
			| connect	| link		| setpgid		| timer_getoverrun |
			|--------------------------------------------------------------------------|
			| creat		| linkat	| setsid		| timer_gettime	   |
			|--------------------------------------------------------------------------|
			| dup		| listen	| setsockopt		| timer_settime	   |
			|--------------------------------------------------------------------------|
			| dup2		| lseek		| setuid		| times		   |
			|--------------------------------------------------------------------------|
			| execl		| lstat		| shutdown		| umask		   |
			|--------------------------------------------------------------------------|
			| execle	| mkdir		| sigaction		| uname		   |
			|--------------------------------------------------------------------------|
			| execv		| mkdirat	| sigaddset		| unlink	   |
			|--------------------------------------------------------------------------|
			| execve	| mkfifo	| sigdelset		| unlinkat	   |
			|--------------------------------------------------------------------------|
			| faecessat	| mkfifoat	| sigemptyset		| utime		   |
			|--------------------------------------------------------------------------|
			| fchmod	| mknod		| sigfillset		| utimensat	   |
			|--------------------------------------------------------------------------|
			| fchmodat	| mknodat	| sigismember		| utimes	   |
			|--------------------------------------------------------------------------|
			| fchown	| open		| signal		| wait		   |
			|--------------------------------------------------------------------------|
			| fchownat	| openat	| sigpause		| waitpid	   |
			|--------------------------------------------------------------------------|
			| fcntl		| pause		| sigpending		| write		   |
			|--------------------------------------------------------------------------|
			|fdatasync	| pipe		| sigprocmask				   |
			----------------------------------------------------------------------------
			
		2. save errno to a local variable on entry to the handler and restore it before the 
		   handler returns because many of the Linux async-signal-safe functions set errno
		3. if a handler shares a global data structurewith the main program or with other handlers,
		   then your handlers and main program should temporarily block all signals while accessing 
		   that data structure
		4. declare global variables with volatile
		5. declare global flag with type sig_atomic_t for which accesses are guaranteed to be atomic

	5. blocking and unblocking signals
		By default, the kernel blocks any pending signals of the type currently being processed by a handler
	
	
		#include <signal.h>
		
		/* changes the set of currently blocked signals
			args:
				how
					SIG_BLOCK, blocked = blocked | set
					SIG_UNBLOCK, blocked = blocked & ~set
					SIG_SETMASK, blocked = set
			returns: 0 if OK, -1 on error
		*/
		int sigprocmask(int how, const sigset_t * set, sigset_t * oldset);
		
		/* initializes set to the empty set
			returns: 0 if OK, -1 on error
		*/
		int sigemptyset(sigset_t * set);
		
		/*  adds every signal to set
			returns: 0 if OK, -1 on error
		*/
		int sigfillset(sigset_t * set);
		
		/* adds signum to set
			returns: 0 if OK, -1 on error
		*/
		int sigaddset(sigset_t * set, int signum);
		
		/* deletes signum from set
			returns: 0 if OK, -1 on error
		*/
		int sigdelset(sigset_t * set, int signum);
		
		/* returns: 1 if member, 0 if not, -1 on error */
		int sigismember(const sigset_t * set, int signum);
		
		/* replaces the current blocked set with mask and then suspends the process until the receipt 
		   of a signal whose action is either to run a handler or to terminate the process
			return:
				1. if the action is to terminate, then the process terminates without returning
				2. if the action is to run a handler, then sigsuspend returns after the handler 
				   returns -1, restoring the blocked set to its state when sigsuspend was called
		*/
		int sigsuspend(const sigset_t * mask);

Process groups
	#include <unistd.h>
	
	/* returns: process group ID of calling process 
	   NOTICE: by default, a child process belongs to the same process group as its parent
	*/
	pid_t getpgrp(void);
	
	/* args: 
		if pid = 0, current process
		if pgid = 0, pgid = pid
	   returns: 0 on success, -1 on error 
	*/
	int setpgid(pid_t pid, pid_t pgid);
	
	The shell creates a separate process group for each job

Nonlocal jumping
	#include <setjmp.h>
	
	/* The setjmp() function saves various information about the calling environment 
	   (typically, the stack pointer, the instruction pointer,  possibly  the  values  of other registers 
	   and the signal mask) in the buffer env for later use by longjmp()
	*/
	int setjmp(jmp_buf env);
	/* NOTICE:ã€€
		1. if the function which called setjmp() returns before longjmp() is called, the behavior is undefined
		2. if some data structures were allocated in the intermediate function calls with the intention 
	           to deallocate them at the end of the function, the deallocation code gets skipped, 
		   thus creating a memory leak
		3. longjmp() and siglongjmp() to the list of async-signal-safe functions. However, if these functions
		   are called from a signal handler that interrupted a call to a non-async-signal-safe function the
		   behavior is undefined if the program subsequently makes a call to a non-async-signal-safe function. 
		   Therefore, any signal whose handler performs a long jump must be blocked during every call to 
		   a non-async-signal-safe function and no non-async-signal-safe functions are called after 
		   returning from the initial call to main()
	*/
	void longjmp(jmp_buf env, int retval);

	/* to ensure signal masks (including the pending and blocked signal vectors) are saved and restored, 
	   using following function
	*/
	int sigsetjmp(sigjmp_buf env, int savesigs);
	void siglongjmp(sigjmp_buf env, int retval);

Tools for manipulating processes
	1. strace, prints a trace of each system call invoked by a running program and its children
	2. ps, lists processes (including zombies) currently in the system
	3. top, prints information about the resource usage of current processes
	4. pmap, displays the memory map of a process
	
