Executable and Linkable Format (ELF) object file
	1. 	ELF header (head)
			1. word size and byte ordering of the system that generated the file
			2. the size of the ELF header
			3. the object file type (e.g., relocatable, executable, or shared)
			4. the machine type (e.g., x86-64)
			5. the file offset of the section header table
			6. the size and number of entries in the section header table
	2. 	.text
	3. 	.rodata
	4. 	.data
	5. 	.bss
			1. uninitialized global and static C variables, along with any global or static variables 
			   that are initialized to zero
			2. at run time, these variables are allocated in memory with an initial value of zero
			3. this section occupies no actual space in the object file
	6 	.symtab (can be removed with 'strip' command)
			a symbol table with information about functions and global variables that are defined 
			and referenced in the program
	7. 	.rel.text (relocation information is not needed in executable object files)
			1. a list of locations in the .text section that will need to be modified
			2. in general, any instruction that calls an external function or references a global variable 
			   will need to be modified
	8. 	.rel.data
			1. relocation information for any global variables that are referenced or defined by the module
			2. in general, any initialized global variable whose initial value is the address of a global
			   variable or externally defined function will need to be modified
	9. 	.debug
			1. a debugging symbol table with entries for local variables and typedefs defined in the program, 
			   global variables defined and referenced in the program, and the original C source file.
			2. only present if the compiler driver is invoked with the -g option
	10. 	.line
			1. a mapping between line numbers in the original C source program and 
			   machine code instructions in the .text section
			2. only present if the compiler driver is invoked with the - g option
	11. 	.strtab
			1. a string table for the symbol tables in the .symtab and .debug sections and 
			   for the section names in the section headers
			2. a string table is a sequence of null-terminated character strings
	12.	section header table (tail)
			the locations and sizes of the various sections (with prefix '.' listed above)

Symbol table (built by assemblers, using symbols exported by the compiler into the assembly-language)
	1. kinds of sysmbols
		1. global symbols that are defined by module m and that can be referenced by other modules
		   (C functions and global variables that are defined in other modules)
		2. global symbols that are referenced by module m but defined by some other module
		   (C functions and global variables that are defined in other modules)
		3. local symbols are defined and referenced exclusively by module m
		   (static C functions and global variables that are defined with the static attribute)
		   
	2. contains an array of entries below
		typedef struct 
		{
			int name; /* String table offset */
			char type:4, /* Function or data (4 bits) */
			     binding:4; /* Local or global (4 bits) */
			char reserved; /* Unused */
			short section; /* Section header index */
			long value; /* Section offset from the beginning of the section where the object is defined
			               or absolute address for executable object files*/
			long size; /* Object size in bytes */
		} Elf64_Symbol;
		
		NOTICE: some pseudosections don't have entries in section header table
			1. ABS, symbols that should not be relocated
			2. UNDEF, symbols that are referenced in this object module but defined elsewhere
			3. COMMON (not .bss), uninitializeddata objects (weak symbols) that are not yet allocated
			   (value field gives the alignment requirement, and size gives the minimum size)
			   
Symbol resolution
	1. symbol resolution for references to local symbols is handled by compiler
	2. the compiler encounters a symbol that is not defined in the current module, 
	   it generates a linker symbol table entry, and leaves it for the linker to handle
	   
	3. at compile time, the compiler exports each global symbol to the assembler as either strong or weak, 
	   and the assembler encodes this information implicitly in the symbol table of the relocatable object file.
	4. functions and initialized global variables get strong symbols
	5. uninitialized global variables get weak symbols.
	6. linkers use the following rules for dealing with duplicate symbol names
		1. multiple strong symbols with the same name are not allowed
		2. given a strong symbol and multiple weak symbols with the same name, choose the strong symbol
		3. given multiple weak symbols with the same name, choose any of the weak symbols
	7. 'gcc -fno-common' triggers an error if it encounters 6.2 and 6.3

Static lib [.a/archive (with a header that describes the size and location of each member object file)]
	1. the linker copies only the object modules in the library that are referenced by the application program
	
	2. to create
		ar rcs out.a src.c
	   to use:
	   		gcc -static xxx.o out.a
	   	equivalently
	   		gcc -static xxx.o -L. -lout
	3.  the ordering of libraries and object files on the command line is significant. 
	    If the library that defines a symbol appears on the command line before the object file 
	    that references that symbol, then the reference will not be resolved and linking will fail
	    (lib can be repeated on the command line if necessry)

Relocation
	1. merges all sections of the same type into a new aggregate section of the same type, and
	   assigns run-time memory addresses to defined sections (including new sections) and symbols
	2. modifies every symbol reference so that they point to the correct runtime addresses,
	   which is supported by relocation entries (in .rel.text for code ,while in .rel.data for data)
	   
	3. whenever the assembler encounters a reference to an object whose ultimate location is unknown, 
	   it generates a relocation entry that tells the linker how to modify the reference when it merges 
	   the object file into an executable
	4. the format of ELF relocation entry
		typedef struct 
		{
			long offset; /* Section offset of the reference to relocate */
			long type:32, /* Relocation type, 
					 such as 
					 	R_X86_64_PC32, relocate a reference that uses a 32-bit 
					 	address relative to PC
						[rel_addr = (unsigned)rel_addr_of_defined(this->symbol) + this->addend 
								- (rel_addr(TEXT_SECTION) + this->offset)]
					 and 
					 	R_X86_64_32, relocate a reference that uses a 32-bit absolute
					 	address 
						[rel_addr = (unsigned)rel_addr_of_defined(this->symbol) + this->addend]
					*/
			     symbol:32; /* symbol table index */
			long addend; /* Signed constant part of relocation expression to get the instruction
					address next to the one where the symbol is invoked when using relative
					address, such as addend = -4 when this->type is R_X86_64_PC32, but 
					addend = 0 when this->type is R_X86_64_32 */
		} Elf64_Rela;
		
		NOTICE: R_X86_64_PC32 and R_X86_64_32 support the x86-64 small code model: the total size of the 
		code and data in the executable object file is smaller than 2 GB. The small code model is the default 
		for gcc . Programs larger than 2 GB can be compiled using the -mcmodel=medium (medium code model) and 
		-mcmodel=large (large code model) flags

ELF executable file
	1.	ELF header
			also includes the program's entry point which is the address of the first instruction to 
			execute when the program runs
	2.	Segment header table
			1. maps contiguous file sections to run-time memory segments
			2. a segment may contain many sections
	3.	.init
			defines a function _init, that will be called by the program's initialization code
	4.	.tex11t
	5.	.rodata
	6.	.data
	7.	.bss
	8.	.symtab
	9.	.debug
	10.	.line
	11.	.strtab
	12.	Section header table
	
	1-5 is read-only memory segment, 6-7 is read/write memory segment, 8-12 are not loaded into memory

Loading
			|-------------------------| 
			| kernel memory		  | memory invisible to user mode
	2^48 - 1	|-------------------------|
			| User stack		  |
			|-------------------------| ← %rsp
			|          ↓		  |
			|			  |
			| memory-mapped region 	  |
			| for shared libraries	  |
			|			  |
			|          ↑		  |
			|-------------------------| ← brk 
			| run-time heap		  |
			|-------------------------|
			| read/write segment	  |
			| (.data, .bss)		  |
			|-------------------------|
			| read-only code segment  |
			| (.inti, .text, .rodata) |
	0x400000	|-------------------------| 
	(default)	|			  |
			|			  |
	0		|-------------------------|
	
		 NOTICE: 
		 	1. there is a gap between the code and data segments due to the alignment.  
			2. the linker uses address-space layout randomization (ASLR) when it 
			   assigns runtime addresses to the stack, shared library, and heap segments
	
	1. loader creates a memory image guided by the program header table, it copies chunks of the executable 
	   object file into the code and data segments
	2. the loader jumps to the program's entry point, which is always the address of the _start function. 
	   This function is defined in the system object file crt1.o and is the same for all C programs
	3. the _start function calls the system startup function, __libc_start_main , which is defined in libc.so. 
	   It initializes the execution environment, calls the user-level main function, handles its return value,
	   and if necessary returns control to the kernel

Shared lib (.so)
	
	1. to create
		gcc -shared -fpic -o out.so src.c
		
	2. link when an application is loaded 
		1. to use
			gcc -o main.out main.c ./out.so
	
		2. mechanism
			1. when the loader loads and runs the executable main.out , it loads the partially linked executable
	   	   	   main.out
			2. main.out contains a .interp section, which contains the path name of the dynamic linker, 
		   	   which is itself a shared object (e.g., ld-linux.so on Linux systems)
			3. the loader loads and runs the dynamic linker
			4. the dynamic linker then finishes the linking task by performing the following relocations:
				1. relocating the text and data of out.so into some memory segment
				2. relocating any references in main.out to symbols defined by out.so
	
	3. link when the application is running
		1. to use
			gcc -rdynamic dll.c -ldl
			
			/* ------------------- dll.c ------------------- */
			#include <stdio.h>
			#include <stdlib.h>
			/* for dlopen, dlsym, dlclose */
			#include <dlfcn.h>
			
			int main(void)
			{
				/* void * dlopen(const char * filename, int flag);
					args:
						filename: shared lib where the external symbols are resolved using 
							  libs previously opened with the RTLD_GLOBAL flag
						flag:
							RTLD_NOW: resolve references to external symbols immediately
								  (before the function return)
							RTLD_LAZY: defer symbol resolution until code from the library 
								   is executed
							RTLD_GLOBAL: either of above flags can be ORed with this flag
				   	returns: pointer to handle if OK, NULL on error
				*/
				void * handle = dlopen("./out.so", RTLD_LAZY);
				if (!handle)
				{
					fprintf(stderr, "%sn", dlerror());
					exit(1);
				}
				
				/* void *dlsym(void *handle, char *symbol);
					args:
						handle: a previously opened shared library
						symbol: a symbol name 
					return: pointer to symbol if OK, NULL on erro
				*/
				void (* func_sym)(void) = (void (*)(void))dlsym(handle, "func_name")
				if (!func_sym)
				{
					fprintf(stderr, "%sn", dlerror());
					exit(1);
				}
				
				/* call the function func_sym() */
				func_sym();
				
				/* int dlclose (void * handle);
					args:
						handle: a handle to a previously opened shared library
					return: 0 if OK, -1 on error
				*/
				if (dlclose(handle) < 0)
				{
					fprintf(stderr, "%sn", dlerror());
					exit(1);
				}	
				
				return 0;
			}

Position-Independent code
	1. the code segments of shared modules can be loaded anywhere in memory without having to 
	   be modified by the linker
	   
	2. resolve internal symbols
		references to symbols in the same executable object module require no special treatment to be PIC. 
	   	These references can be compiled using PC-relative addressing and relocated by the static linker 
	   	when it builds the object file
	3. resolve external symbols
		variable
			1. the global offset table (GOT) is the data segment which an 8-byte entry 
			   for each external data object referenced by the object module. 
			2. the compiler generates a relocation record for each entry in the GOT. At load time, 
			   the dynamic linker relocates each GOT entry so that it contains the absolute address 
			   of the object
		function
				GOT in data segment
				--------------------------------------		  --------------------------------------
				| GOT[0]: addr of .dynamic	     |		  | GOT[0]: addr of .dynamic	       |
				| GOT[1]: addr of reloc entries	     |		  | GOT[1]: addr of reloc entries      |
				| GOT[2]: addr of dynamic linker     |	-------→  | GOT[2]: addr of dynamic linker     |
				|	  in the ld-linux.so module  |		  |	    in the ld-linux.so module  |
				| GOT[3]: 0x4005b6 # sys startup     |		  | GOT[3]: 0x4005b6 # sys startup     |
			III	| GOT[4]: 0x4006c6 # func()	     |		  | GOT[4]: &func()		       |    VI
				--------------------------------------		  --------------------------------------
			
				procedure linkage table (PLT) (16-byte each entry)
				in code segment
				--------------------------------------
				| # PLT[0]: call dynamic linker	     |
			V	| 4005a0: push	*GOT[1]  	     |
				| 4005a6: jupq	*GOT[2]		     |
				| # PLT[1]: invoke __libc_start_main |
				| ...				     |
				| # PLT[2]: call func()		     |
			II	| 4005c0: jmpq	*GOT[4]		     |
			IV	| 4005c6: pushq	$0x1		     |
				| 4005cb: jmpq	4005a0		     |
				--------------------------------------
			
			I 	call into PLT[2] instead of calling func() directly

Lib interpositioning
	1. compile-time
		/* --------------- malloc.h --------------- */
		#define malloc(size) mymalloc(size)
		#define free(ptr) myfree(ptr)
		
		void * mymalloc(size_t size);
		void myfree(void * ptr);
		
		/* --------------- malloc.c --------------- */
		# include <stdlib.h>
		# include "malloc.h"
		
		void * mymalloc(size_t size) { return malloc(size); }
		void myfree(void * ptr) { free(ptr); }
		
	2. link-time
		/* --------------- malloc.c --------------- */
		#include <stdlib.h>
		
		void * __real_malloc(size_t size);
		void __real_free(void * ptr);
		
		void * __wrap_malloc(size_t size) { return __real_malloc(size); }
		void __wrap_free(void * ptr) { __real_free(ptr); }
		
		
		> gcc -Wl,--wrap,malloc -Wl,--wrap,free -o main.out main.c malloc.c
		the -Wl flag passes following option to the linker where each comma is replaced with a space
		
	3. run-time
		/* --------------- malloc.c --------------- */
		#include <stdlib.h>
		#include <dlfcn.h>
		
		void * malloc(size_t size)
		{
			/* get addr of libc malloc */
			void * (*mallocp)(size_t) = dlsym(RTLD_NEXT, "malloc");
			/* call libc malloc */
			if (!mallocp) { exit(1); }
			return mallocp(size);
		}
		
		void free(void * ptr)
		{
			/* get addr of libc free */
			void (*freep)(void *) = dlsym(RTLD_NEXT, "free");
			if (!free) { exit(1); }
			/* call libc free */
			freep(ptr);
		}
		
		
		> gcc -shared -fpic -o out.so malloc.c -ldl
		> LD_PRELOAD="./out.so" ./main.out
		 when load and execute a program, the dynamic linker ( LD-LINUX.SO ) will search the libraries 
		 in the path indicated by LD_PRELOAD, the environment variable set to a list of shared library
		 pathname, before any other shared libraries

command tools for manipulating object files
	1. ar: creates static libraries, and inserts, deletes, lists, and extracts members.
	2. strings: lists all of the printable strings contained in an object file.
	3. strip: deletes symbol table information from an object file.
	4. nm: lists the symbols defined in the symbol table of an object file.
	5. size: lists the names and sizes of the sections in an object file.
	6. readelf: displays the complete structure of an object file, including all of the information encoded
		    in the ELF header. Subsumes the functionality of 'size' and 'nm'.
	7. objdump: the mother of all binary tools. Can display all of the information in an object file. 
		    Its most useful function is disassembling the binary instructions in the .text section.
	8. ldd: lists the shared libraries that an executable needs at run time
