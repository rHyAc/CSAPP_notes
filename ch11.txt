
Basic
	1. clients and servers are processes and not machines or hosts
	
	2. to a host, a network is just another I/O device that serves as a source and 
           sink for data
	   
	3. TCP provides reliable full duplex connections

IP
	TCP/IP defines a uniform network byte order (big-endian byte order) for any integer
	data item, such as an IP address, that is carried across the network in a packet 
	header
	
	/* IP address structure */
	struct in_addr
	{
		uint32_t s_addr; /* address in network byte order (bigendian) */
	};
	
	#include <arpa/inet.h>
	/* converts an unsigned integer from host byte order to network byte order
		returns: value in network byte order 
	*/
	uint32_t htonl(uint32_t hostlong);
	uint16_t htons(uint16_t hostshort);

	/* converts an unsigned integer from network byte order to host byte order
		returns: value in host byte order 
	*/
	uint32_t ntohl(uint32_t netlong);
	uint16_t ntohs(unit16_t netshort);
	
	/*  converts a dotted-decimal string (src) to a binary IP address in network byte
	    order (dst) 
		returns: 1 if OK, 0 if src is invalid dotted decimal, −1 on error
		NOTICE: the "p" stands for presentation and"n" stands for network 
	*/
	int inet_pton(AF_INET, const char * src, void * dst);
	
	/*  converts a binary IP address in network byte order (src) to the corresponding
	    dotted-decimal representation and copies at most size bytes of the resulting 
	    null-terminated string to dst
		returns: pointer to a dotteddecimal string if OK, NULL on error
	*/
	const char * inet_ntop(AF_INET, const void * src, char * dst, socklen_t size);

Domain names
	(...).third-level.second-level.first-level
	      www	 .github      .com
	      
	1. nslookup + domain name command, displays the IP addresses associated 
					with a domain name
	2. hostname command, show the real domain name of local host
	
	NTOICE: some valid domain names are not mapped to any IP address
	
	3. the ephemeral port assigned by the kernel

Socket
	from the perspective of the Linux kernel, a socket is an end point for 
	communication. From the perspective of a Linux program, a socket is an open 
	file with a corresponding descriptor
	
	
	   client			   sever
	
	getaddrinfo			getaddrinfo
	     ↓				     ↓
	   socket			   socket
	     |				     ↓
	     |				    bind
	     |				     ↓
	     |				   listen
	     ↓				     ↓
	  connect -----------------------→ accept ←---
	     ↓				     ↓	     | await connection
	    ...				    ...	     | request from
	     ↓		    EOF		     ↓	     | next client
	   close -------------------------→ read     |
	   				     ↓       |
					   close -----
						
						
	/* IP socket address structure */
	struct sockaddr_in
	{
		uint16_t sin_family; /* protocol family (always AF_INET) */
		uint16_t sin_port; /* port number in network byte order */
		struct in_addr sin_addr; /* IP address in network byte order */
		unsigned char sin_zero[8]; /* pad to sizeof(struct sockaddr) */
	};
	
	/* generic socket address structure (for connect, bind, and accept) 
	   (usually casted from sockaddr_in)
	*/ 
	struct sockaddr 
	{
		uint16_t sa_family; /* protocol family */
		char sa_data[14]; /* address data */
	};
	
	
	#include <netdb.h>
	/* converts string representations of hostnames/host addresses and 
	   service names/port numbers into socket address structures by creating 
	   an addrinfo structure in a list, filling in each field except for 
	   ai_flags args
			host: a domain name or a numeric address 
			      (e.g., a dotted-decimal IP address)
			service: a service name (e.g., http) or a decimal port number
				NOTICE: either host or service can be NULL
			hints: only the ai_family, ai_socktype, ai_protocol, and ai_flags 
			       fields in the addrinfo structure can be set
			       
			       struct addrinfo 
			       {
			       		 /* hints argument flags 
					 	AI_ADDRCONFIG: asks getaddrinfo to return 
							       IPv4 addresses only if the 
							       local host is configured for 
							       IPv4. Similarly for IPv6
						AI_CANONNAME: instructs getaddrinfo to point
							      the ai_canonname field in the 
							      first addrinfo structure in the
							      list to the canonical name of 
							      host. This field is NULL by
							      default
						AI_NUMERICSERV: forces the service argument 
							        to be a port number
						AI_PASSIVE: instructs getaddrinfo to return 
							    socket addresses can be used by 
							    servers as listening sockets. In
							    this case, the host argument 
							    should be NULL (wildcard address)
							    and by default, it returns socket
							    addresses that can be used by 
							    clients as active sockets in 
							    calls to connect
						ORed
					 */
					int ai_flags;
						
					/* first arg to socket function 
						AF_INET for IPv4
						AF_INET6 for IPv6
					*/
					int ai_family; 
					
					/* second arg to socket function 
						SOCK_STREAM: restricts the list to at most 
							     one addrinfo structure for each 
							     unique address, one whose socket
							     address can be used as the end 
							     point of a connection
					*/
					int ai_socktype; 
					
					/* third arg to socket function */
					int ai_protocol; 
					
					/* canonical hostname */
					char *ai_canonname; 
					
					/* size of ai_addr struct */
					size_t ai_addrlen; 
					
					/* ptr to socket address structure */
					struct sockaddr *ai_addr; 
					
					/* ptr to next item in linked list */
					struct addrinfo *ai_next; 
			       };
			       
			result: return pointer to a linked list of addrinfo, each of 
			        which points to a socket address structure that corresponds 
				to host and servic
		returns: 0 if OK, nonzero error code on error
		NOTICE: after a client calls getaddrinfo, it should walk the return list, 
			trying each socket address in turn until the calls to socket,
			connect and bind function succeed
	*/
	int getaddrinfo(const char * host, const char * service, 
			const struct addrinfo * hints, struct addrinfo ** result);
	
	/* free the list of addrinfo structures created by getaddrinfo */
	void freeaddrinfo(struct addrinfo * result);
	
	/* converts a socket address structure to the corresponding host and service
	   name strings
	   	args
			flags
				NI_NUMERICHOST: cause getnameinfo to return a numeric 
						address string instead of returning a
						domain name in host by default
				NI_NUMERICSERV: return the port number instead of looking in
						/etc/services and if possible, return a 
						service name by default
				ORed
	   	returns: 0 if OK, nonzero error code on error
		NOTICE: either host or service can be NULL
	*/
	int getnameinfo(const struct sockaddr * sa, socklen_t salen, char * host, 
			size_t hostlen, char * service, size_t servlen, int flags);
	
	/*  convert the nonzero error code returned from getaddrinfo or getnameinfo function
	    to a message string
	*/
	const char * gai_strerror(int errcode);
	
	
	#include <sys/socket.h>
	/* returns: nonnegative descriptor if OK, −1 on error 
	   e.g.
	   	clientfd = socket(AF_INET, SOCK_STREAM, 0);
	   	close(clientfd);
	*/
	int socket(int domain, int type, int protocol);
	
	/* blocks until either the connection is successfully established or
	   an error occurs
	   	args
			addr, socket address
			addrlen, sizeof(sockaddr_in)
		returns: 0 if OK, −1 on error 
	*/
	int connect(int clientfd, const struct sockaddr * addr, socklen_t addrlen);

	/* asks the kernel to associate the server's socket address in addr with the 
	   socket descriptor sockfd 
	   	args
			addrlen, sizeof(sockaddr_in)
		returns: 0 if OK, −1 on error
	*/
	int bind(int sockfd, const struct sockaddr * addr, socklen_t addrlen);
	
	/* converts sockfd from an active socket to a listening socket that can accept 
	   connection requests from clients
	   	args
			backlog, a hint about the number of outstanding connection requests
			         that the kernel should queue up before it starts to refuse
				 requests
		returns: 0 if OK, −1 on error
	*/
	int listen(int sockfd, int backlog);
	
	/*  waits for a connection request from a client to arrive on the listening 
	    descriptor listenfd , then fills in the client's socket address in addr 
		returns: 
			1. nonnegative connected descriptor that can be used to 
			   communicate with the client using Unix I/O functionsif OK
			2. −1 on error
		NOTICE:	
			1. the listening descriptor serves as an end point for client 
			   connection requests. It is typically created once and exists for
			   the lifetime of the server
			2. the connected descriptor is the end point of the connection that 
			   is established between the client and the server. It is created
			   each time the server accepts a connection request and exists only
			   as long as it takes the server to service a client
	*/
	int accept(int listenfd, struct sockaddr * addr, int * addrlen);
