Concurreny based on processes
 	server
		1. fork a child after accepting a new connection
		2. the child close its listening descriptor and the parent closes its connected descriptor
		   to free the resources are no longer needed
		3. the parent use the SIGCHLD handler reap all the current zombie children
		
	 the overhead for process control and IPC is high
	 
Concurreny with I/O multiplexing
	#include <sys/select.h>
	/* blocks until at least one descriptor in the fdset is ready for operations.
	   As a side effect, the fdset is modified to point to a subset consisting of the descriptors 
	   in the fdset that are ready for operations
		args
			n, the cardinality of the fdset (the biggest descriptor in fdset + 1)
		returns: 
			nonzero count of ready descriptors
			-1 on error
		NOTICE: because of the side effect, update the fdset every time select is called
	*/
	int select(int n, fd_set * fdset, NULL, NULL, NULL);


	/* macros for manipulating descriptor sets */
	
	/* clear all bits in fdset */
	FD_ZERO(fd_set * fdset);

	/* clear bit fd in fdset */
	FD_CLR(int fd, fd_set * fdset); 

	/* turn on bit fd in fdset */
	FD_SET(int fd, fd_set * fdset); 

	/* is bit fd in fdset on? */
	FD_ISSET(int fd, fd_set * fdset);

	
	server
		1. add listening descriptor into fdset
		2. once the listening descriptor gets ready, accept the connecttion and add connected 
		   descriptor into fdset
		
	1. easy to share data between flows and more efficient
	
	2. as long as some logical flow is busy, no other logical flow can make progress
	3. cannot fully utilize multi-core processors

Concurrency with threads
	1. each thread has its own thread context, including a unique integer thread ID (TID), stack,
	   stack pointer, program counter, general-purpose registers, and condition codes
	   (NOTICE: these stacks are usually but not always accessed independently by their 
	   	    respective threads)
	2. threads, unlike processes, are not organized in a rigid parent-child hierarchy. 
	   The threads associated with a process form a pool of peers that can kill any of its peers
	   or wait for any of its peers to terminate
	    

	#include <pthread.h>
	
	/* runs the thread routine f in the context of the new thread and with an input argument of arg 
		args
			tid, returns the ID of the newly created thread
			attr, change the default attributes of the newly created thread
		returns: 0 if OK, nonzero on error 
	*/
	int pthread_create(pthread_t * tid, const pthread_attr_t * attr, void * (* f)(void *), void * arg);
	
	/* returns: thread ID of caller */
	pthread_t pthread_self(void);

	/*  terminates the calling thread and returns a value thread_return */
	void pthread_exit(void * thread_return);
	
	/*  terminates the thread of tid */
		returns: 0 if OK, nonzero on error
	*/
	int pthread_cancel(pthread_t tid);
	
	NOTICE: when a thread calls exit function, it will  terminates the process and all threads 
		associated with the process
	
	/* blocks until thread tid terminates, assigns the generic ( void * ) pointer returned 
	   by the thread routine to the location pointed to by thread_return , and then reaps any
	   memory resources held by the terminated thread
	   	returns: 0 if OK, nonzeroon error
	*/
	int pthread_join(pthread_t tid, void ** thread_return);
	
	/* detaches the joinable thread tid [ At any point in time, a thread is 
	   joinable (default) or detached. A joinable thread can be reaped and killed by other threads. 
	   Its memory resources (such as the stack) are not freed until it is reaped by another thread. 
	   In contrast, a detached thread cannot be reaped or killed by other threads. 
	   Its memory resources are freed automatically by the system when it terminates]
		returns: 0 if OK, nonzero on error
	*/
	int pthread_detach(pthread_t tid);
	
	/* a global or static variable that is always initialized to PTHREAD_ONCE_INIT */
	pthread_once_t once_control = PTHREAD_ONCE_INIT;
	
	/* the first time you call pthread_once with an argument of once_control , it invokes
	   init_routine , which is a function with no input arguments that returns nothing. 
	   Subsequent calls to pthread_once with the same once_control variable do nothing
	   	return: always 0
		NOTICE: it is useful whenever need to dynamically initialize global variables
			that are shared by multiple threads in the thread routine
	*/
	int pthread_once(pthread_once_t * once_control, void (* init_routine)(void));
	
	server
		1. once accepting a new connection, run the thread routine with the argument 
		   set to the connected descriptor returning from the accept function in a new thread
		   may introduce a race problem between some statements 
		   (e.g., int fd = *(int *)args;) in the routine and the accept function in the main 
		   thread loop.
		2. to sovle this issue, it should assign the return connected descriptor to a new dynamic
		   variable, and set the variable to the thread routine as a argument 
		   (e.g., int * condfd = malloc(sizeof (int)), *condfd = accept(...);
		   	  pthread_create(..., (void *)condfd);
		   )
		3. each condfd should be free and close in the thread routine
		
Shared variable
	local static variables in thread routines are shared by all threads

synchronization
	1. progress graph (uniprocessors only)
		1.  the execution of n concurrent threads is a directed trajectory through an n-dimensional 
		    Cartesian space
		2. each axis k corresponds to the progress of thread k
		3. each point represents the state where thread k has completed corresponding instruction
		4. the origin of the graph corresponds to the initial state where none of the threads 
		   has yet completed an instruction
		
		5. manipulate the contents of the shared variable constitute a critical section that 
		   should not be interleaved with the critical section of the other thread
		6. the intersection of the two critical sections defines a region of the state space 
		   known as an unsafe region (does not include its perimeter)
		7. a trajectory that touches any part of the unsafe region is an unsafe trajectory
	
	2. semaphores
		for a semaphore s
			P (s): if s is nonzero, then P decrements s and returns immediately.
			       If s is zero, then suspend the thread until s becomes nonzero and
			       the thread is restarted by a V operation. After restarting, the P
			       operation decrements s and returns control to the caller.
			V (s): the V operation increments s by 1. If there are any threads
			       blocked at a P operation waiting for s to become nonzero, then the
			       V operation restarts exactly one of these threads, which then
			       completes its P operation by decrementing s.
	
		#include <semaphore.h>
		/* nitializes semaphore sem to value
			returns: 0 if OK, −1 on error
		*/
		int sem_init(sem_t * sem, 0, unsigned int value);

		/* P(s)
			returns: 0 if OK, −1 on error
		*/
		int sem_wait(sem_t *s); 

		/* V(s)
			returns: 0 if OK, −1 on error
		*/
		int sem_post(sem_t *s); 
		
	3. prethreading server
		1. create threads before accepting connections
		2. the main thread (producer) places a connected descriptor into buffer each time
		   accepting a connection
		3. the thread routine (consumer) receives a connected descriptor from buffer and 
		   serve the client's request
